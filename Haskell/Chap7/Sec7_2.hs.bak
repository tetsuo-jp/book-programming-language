module Sec7_2 where

import SynLib
import ParseLib
import ScanLib
import Data.Char (ord,isAlphaNum,isAlpha,isSpace)

import Prelude hiding (seq,lex)

-- p.47
numval :: [Char] -> Int
numval = foldl (\u l -> u * 10 + l) 0 . map digval

digval :: Char -> Int
digval d = ord d - ord '0'

-- p.138-139, p.78, p.76, p.68-69 (<-- p.63, p.53)
data Expr = Num Numeral
          | Var Ide
          | Bexpr BinOpr Expr Expr
          | Rexpr RelOpr Expr Expr -- p.78
          | If Expr (Expr, Expr) -- p.78
             deriving Show
data Decl = Decl Ide Expr
          deriving Show
type Numeral = [Char]
type Ide = [Char]
data BinOpr = Plus | Minus | Times | Over
            deriving Show
data RelOpr = Equal | NotEqual | Greater -- p.78
            | GreaterEq | Less | LessEq
              deriving Show

-- p.78, p.69
data Val = V_Int Int | V_Bool Bool
           deriving Show

-- p.70
type Env = Assoc Ide Val

none :: Assoc a b               -- p.38
assoc :: b -> Assoc a b         -- p.42
aLookup :: Eq a => Assoc a b -> a -> b -- p.41
update :: Eq a => Assoc a b -> a -> b -> Assoc a b -- p.41

type Assoc a b = [(a,b)]        -- p.41
none = []                       -- p.41-42
assoc d = [(undefined,d)]       -- p.42
aLookup [] x = undefined        -- p.41-42
aLookup [(_,d)] x = d           -- p.41-42
aLookup ((y,v):h) x | x==y = v
                    | otherwise = aLookup h x
update h x v = (x,v) : h        -- p.42

-- p.71
declenv :: Decl -> Env -> Env -> Env
declenv (Decl x e ) r' r = update r x (expval e r')

-- p.79, p.77, p.71
expval :: Expr -> Env -> Val    -- p.79
expval (Num n) r        = V_Int (numval n)
expval (Var x) r        = aLookup r x
expval (Bexpr o e e') r = V_Int (binopr o v v')
                          where
                          V_Int v  = expval e  r
                          V_Int v' = expval e' r
expval (Rexpr o e e') r = V_Bool (relopr o v v') -- p.79
                          where
                          V_Int v  = expval e  r
                          V_Int v' = expval e' r
expval (If e (e',e'')) r | v         = expval e' r -- p.79
                         | otherwise = expval e'' r
                         where
                         V_Bool v = expval e  r

-- p.77
recdecl :: [Decl] -> Env -> Env
recdecl ds r = r''
               where
               r'' = foldl declenv' r ds
               declenv' r' d = declenv d r'' r'

-- p.72
binopr :: BinOpr -> Int -> Int -> Int
binopr Plus  = (+)
binopr Minus = (-)
binopr Times = (*)
binopr Over  = div

-- p.79
relopr :: RelOpr -> Int -> Int -> Bool
relopr Equal     = (==)
relopr NotEqual  = (/=)
relopr Greater   = (>)
relopr GreaterEq = (>=)
relopr Less      = (<)
relopr LessEq    = (<=)

-- p.62
lex :: [Char] -> [Token Tag]
lex = (strip T_Junk) . fst . head . lexer

syn :: [Token Tag] -> Prog
syn = fst . head . prog

parse :: [Char] -> Prog
parse = syn . lex

lexer :: Parser Char [Token Tag]
lexer = lexime [(some (satisfy isSpace), T_Junk),
                (number, T_Num),
                (string "if", T_Sym),
                (string "then", T_Sym),
                (string "else", T_Sym),
                (ident, T_Ide),
                (anyof string ["(",")",
                               "==","/=",">=",">","<=","<",
                               "+","-", "*", "/",
                               "=",";"
                               ], T_Sym) ]

-- p.64, p.72
r0 :: Env
r0 = none

eval :: String -> Val           -- p.78-80
eval = flip expval r0 . parse

-- p.139
sa :: Expr -> Bool {- 必ず停止する -}
sa (Num n) = True
sa (Var x) =

{---------------------------------------------------------
  補助関数
 ---------------------------------------------------------}

type Prog = Expr
prog = expr

expr :: Parser (Tag,[Char]) Expr
expr =  lit "if" `x_seq` expr `seqp`
                lit "then" `x_seq` expr `seqp`
                lit "else" `x_seq` expr
                        `using` uncurry If `alt`
        rexpr
rexpr = expr'' `seqp` rexpr' `using` uncurry (flip id)
rexpr'=	lit "==" `x_seq` expr'' `using` flip (Rexpr Equal) `alt`
        lit "/=" `x_seq` expr'' `using` flip (Rexpr NotEqual) `alt`
        lit ">" `x_seq` expr'' `using` flip (Rexpr Greater) `alt`
        lit ">=" `x_seq` expr'' `using` flip (Rexpr GreaterEq) `alt`
        lit "<" `x_seq` expr'' `using` flip (Rexpr Less) `alt`
        lit "<=" `x_seq` expr'' `using` flip (Rexpr LessEq) `alt`
        succeed id
expr''=	term `seqp` expr' `using` uncurry (foldl (flip id))
expr' = many ((lit "+" `x_seq` term `using` flip (Bexpr Plus)) `alt`
              (lit "-" `x_seq` term `using` flip (Bexpr Minus)))
term =	factor `seqp` term' `using` uncurry (foldl (flip id))
term' = many ((lit "*" `x_seq` factor `using` flip (Bexpr Times)) `alt`
                (lit "/" `x_seq` factor `using` flip (Bexpr Over)))
factor = factor'
factor'=kind T_Num `using` Num `alt`
        kind T_Ide `using` Var `alt`
        lit "(" `x_seq` expr `seq_x` lit ")"

decls :: Parser (Tag,[Char]) [Decl]
decls = decl `seqp` many (lit ";" `x_seq` decl) `using` uncurry (:)

decl :: Parser (Tag,[Char]) Decl
decl =	(kind T_Ide `seqp` lit "=" `x_seq` expr)
                `using` uncurry Decl

{---------------------------------------------------------
  テスト
 ---------------------------------------------------------}

-- p.69
testexp01 = Bexpr Plus (Num "29") (Num "31")
testexp02 = Bexpr Times (Var "x") (Num "3")

-- p.69
test01 = parse "29+31"
test02 = parse "x*3"

-- p.138
test10 = parse "if x < 0 then x + y else x"